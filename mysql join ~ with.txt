--Join--
join : 여러개의 테이블에서 원하는 테이블을 추출해주는 쿼리문이다.

1. carteian product(카티션 곱) 조인 :  테이블 행의 갯수만큼 출력해주는 조인이다.  ( 라는게 있는데 잘안쓰인다고 하심)

2. inner join : 가장 많이 사용되는 조인방법으로 조인 대상이 되는 두 테이블에서 공통적으로 존재하는 컬럼의 값이 일치되는 행을 연결하여 결과를 생성하는 방법이다.

기본형태 (select - from - on) ( from으로 join할 테이블들을 지정하고 on으로 공통컬럼들로 묶는다)  << join table명 순서 상관없음
SELECT e.department_id, e.first_name, e.job_id, j.job_title
FROM employees e inner join jobs j
ON e.job_id = j.job_id;


SELECT(보여주는 형식) - FROM(가져오는 폴더 inner join) - ON(일치하는 테이블) - WHERE(조건)
(만약 inner join 2개한다면 FROM -   inner join -  on - inner join - on)



3. outer join :  한 테이블에는 데이터가 있고 다른 반대쪽에는 데이터가 없는 경우에 데이터가 있는 테이블의 내용을 모두 가져오는 조건이다.
기본형태 (select - from(left outer join) - on)  << join 순서를 반대로 하던지 아니면 left right 바꾸면됨 그 지정하는 곳쪽을 전부 가져옴
공통적인게 없는 부분은 null 값으로 모두 가지고 온다

4. self join : 자기 자신을 inner join 하는것 ( 보통 사원 - 매니저 관계문제등 에서 예제로 쓰였음)

5. natural join : 반드시 동일한 이름 타입을 가진 컬럼이 필여한데 자동으로 조인이 된다. ( ON으로 일치컬럼 맞춰줄 필요없음)

--subquery--
하나의 SQL문안에 포함되어 있는 또 다른 SQL문을 말한다. 
서브쿼리는 메인쿼리의 컬럼을 모두 사용할 수 있지만 메인쿼리는 서브쿼리의 컬럼을 사용할 수 없다.

기본형태 -  외부 커리 - 스칼리 서브쿼리(SELECT 절에 쿼리가 사용되는 경우로, 함수처럼 레코드당 정확히 하나의 값만을 반환하는 서브쿼리)
주의점    - 서브쿼리의 결과는 반드시 1건 이하여야 한다
	- 서브쿼리에서 order by 를사용하지 못한다.( order by 는 메인쿼리 마지막 문장에 반드시 위치)

1. 동작 하는 방식에 관한 분류
correlated(연관) <>  Un-Correlated(비연관) / 연관은 메인쿼리의 컬럼을 가지고있는 형태의 서브쿼리 - 대표적으로 EXISTS 서브쿼리가있다)

2. 반환되는 데이터의 형태에 따른 서브쿼리의 종류
Single Row(단일행 서브쿼리) 
Multi Row(다중행 서브쿼리) : 다중행 서브쿼리의 예시로는(in, all, any, some, exists) 가 있다
Multi Column(다중칼럼 서브쿼리) : 서브쿼리의 실행 결과로 여러 컬럼을 반환한다. - 서브쿼리와 메인쿼리에서 비교하고자 하는 컬럼 갯수와 컬럼의 위치가 동일해야 한다


-- 상관관계 서브쿼리--
 : 서브쿼리에서 메인쿼리의 컬럼을 참조한다.(메인쿼리를 먼저수행한다.)
   서브쿼리는 메인쿼리 각각의 행에 대해서 순서적으로 한번씩 실행한다.
 <아래 쿼리 처리순서>
 1st : 바깥쪽 쿼리의 첫째 row에 대하여 
 2nd : 안쪽 쿼리에서 자신의 속해있는 부서의 MAX salary과
       비교하여 true 이면 바깥의 컬럼값을 반환하고 , 
       false 이면 값을 버린다. 
 3rd : 바깥쪽 쿼리의 두 번째 row에 대하여 마찬가지로 실행하며, 
       이렇게 바깥쪽 쿼리의 마지막 row까지 실행한다. 
-- 예제
select department_id, salary, first_name, hire_date
from employees
where (department_id, salary) in ( select department_id, max(salary)  max(salary)
			       from employees
			      group by department_id);

-- with절과 cte --
with절은 cte(common table expression)을 표현하기 위한 구문 cte는 기존의 뷰,파생 테이블, 임시 테이블 등으로 사용되던 것을 대신할 수 있다.

<비재귀적(Non-Recursive)>
WITH CTE_테이블이름(열이름)
AS
(
쿼리문;
)
SELECT 열이름 FROM CTE_테이블 이름;	

<<< with 인자값 쿼리문의 인자값 아래 실행부의 인자값의 종류와 갯수가 일치해야한다>>>>>>>
with abc(f, s)   <-- 컬럼명 설정할수 있다 (아래에서 select랑 이름이 일치해야한다 / 하지만 아래에서 보이고싶은열만 정해서 보여줄순있음)
as
(
select first_name, salary                 << - 실제로 실행되는 쿼리문
from employees
where department_id = 90
)
select f, s from abc;                      <<- select * from abc; 에서 *는 모두를 뜻하는 용도로 사용되는것이었음

mysql은 재귀적 구문을 지원하지 않으나 cte로 비슷하게 흉내 내는수준 하지만 몹시 어렵다고한다.(gpt피셜)
<재귀적(Recursive)>
WITH recursive CTE_테이블이름(열이름)
AS
(
쿼리문;
)
SELECT 열이름 FROM CTE_테이블 이름;


